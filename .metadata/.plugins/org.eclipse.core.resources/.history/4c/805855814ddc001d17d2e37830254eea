package com.in28minutes.springboot.restapi.survey;

import java.net.URI;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

@RestController
public class SurveyResource {
  
	private SurveyService surveyService;
	@Autowired
	public SurveyResource(SurveyService surveyService) {
		super();
		this.surveyService = surveyService;
	}
	
	@RequestMapping("/surveys")
	public List<Survey> retriveAllSurveys(){
		return surveyService.retriveAllSurveys();
	}
	
	@RequestMapping("/surveys/{surveyId}")
	public Survey retriveSpecificSurveysById(@PathVariable String surveyId){
		Survey survey = surveyService.retriveSurveysById(surveyId);
		if(survey==null) {
		throw new ResponseStatusException(HttpStatus.NOT_FOUND);	
		}
		return survey;
	}
	
	@RequestMapping("/surveys/{surveyId}/question")
	public List<Question> retriveAllSurveyQuestion(@PathVariable String surveyId){
		List<Question> questions = surveyService.retriveQuestionForSurvey(surveyId);
		if(questions==null) {
		throw new ResponseStatusException(HttpStatus.NOT_FOUND);	
		}
		return questions;
	}
	
	@RequestMapping("/surveys/{surveyId}/question/{questionId}")
	public Question retriveSurveyQuestionById(@PathVariable String surveyId,@PathVariable String questionId){
		Question questions = surveyService.retriveSurveyQuestionById(surveyId,questionId);
		if(questions==null) {
		throw new ResponseStatusException(HttpStatus.NOT_FOUND);	
		}
		return questions;
	}
	
	@RequestMapping(value="/surveys/{surveyId}/question",method=RequestMethod.POST)
	public ResponseEntity<Object> addNewSurveyQuestion(@PathVariable String surveyId,@RequestBody Question question){
		
		String questionId= surveyService.addNewSurveyQuestion(surveyId,question);
		
		URI location= ServletUriComponentsBuilder.fromCurrentRequest().path("/{questionId}").buildAndExpand(questionId).toUri();
		return ResponseEntity.created(location).build();

	}
	
	
	@RequestMapping(values="/surveys/{surveyId}/question/{questionId}",,method=RequestMethod.DELETE)
	public Question deleteSurveyQuestion(@PathVariable String surveyId,@PathVariable String questionId){
		surveyService.deleteSurveyQuestion(surveyId,questionId);
	      
		return ResponseEntity.noContent().build();
	}
}
