package com.in28minutes.springboot.restapi.survey;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.function.Predicate;

import org.springframework.stereotype.Service;

@Service
public class SurveyService {
	
	private static List<Survey> surveys= new ArrayList<>();
	
	static {
		Question question1 = new Question("Question1",
		        "Most Popular Cloud Platform Today", Arrays.asList(
		                "AWS", "Azure", "Google Cloud", "Oracle Cloud"), "AWS");
		Question question2 = new Question("Question2",
		        "Fastest Growing Cloud Platform", Arrays.asList(
		                "AWS", "Azure", "Google Cloud", "Oracle Cloud"), "Google Cloud");
		Question question3 = new Question("Question3",
		        "Most Popular DevOps Tool", Arrays.asList(
		                "Kubernetes", "Docker", "Terraform", "Azure DevOps"), "Kubernetes");

		List<Question> questions = new ArrayList<>(Arrays.asList(question1,
		        question2, question3));

		Survey survey = new Survey("Survey1", "My Favorite Survey",
		        "Description of the Survey", questions);

		surveys.add(survey);

	}

	public List<Survey> retriveAllSurveys() {
		return surveys;
	}

	public Survey retriveSurveysById(String surveyId) {
		// TODO Auto-generated method stub
		
		Predicate<? super Survey> predicate= survey -> survey.getId().equalsIgnoreCase(surveyId);
		Optional<Survey> optionalSurvey = surveys.stream().filter(predicate).findFirst();
		if(optionalSurvey.isEmpty()) return null;
		return optionalSurvey.get();
	}

	public List<Question> retriveQuestionForSurvey(String surveyId) {
		// TODO Auto-generated method stub
		Survey survey= retriveSurveysById(surveyId);
		if(survey==null) return null;
		return survey.getQuestions();
	}

	public Question retriveSurveyQuestionById(String surveyId, String questionId) {
		Survey survey = retriveSurveysById(surveyId);
		Predicate<? super Question> predicate= question -> question.getId().equalsIgnoreCase(questionId);
		Optional<Question> questionSurvey = survey.getQuestions().stream().filter(predicate).findFirst();
		if(questionSurvey.isEmpty()) return null;
		return questionSurvey.get();
	}




}
